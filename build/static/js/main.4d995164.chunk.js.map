{"version":3,"sources":["constants/URLs.js","api/APIClient.js","components/ToDo.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["URLs","GET_TODO","UPDATE_TODO","headers","APIClient","getToDoList","url","axios","get","then","response","data","responseJson","catch","error","console","updateToDo","id","replace","patch","isComplete","ToDo","toDos","setLoading","handleCompleteTask","a","status","map","toDo","index","dueDate","description","isPastDue","Date","className","onClick","format","ToDoList","useState","setToDos","loading","sortToDoList","b","useEffect","toDoListData","sort","type","color","height","width","updatedToDos","findIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d995164.chunk.js","sourcesContent":["const URLs = { \n    GET_TODO:'https://944ba3c5-94c3-4369-a9e6-a509d65912e2.mock.pstmn.io/get',\n    UPDATE_TODO:'https://944ba3c5-94c3-4369-a9e6-a509d65912e2.mock.pstmn.io/patch/{toDoID}'\n}\n\nexport default URLs;\n","import axios from 'axios';\nimport URLs from '../constants/URLs';\n\nconst headers = {headers:{'X-Api-Key':'PMAK-5ef63db179d23c004de50751-10300736bc550d2a891dc4355aab8d7a5c'}}\n\nlet APIClient = {\n    getToDoList(){\n        const url = URLs.GET_TODO;\n        return axios.get(url, headers)\n        .then((response) => response.data)\n        .then((responseJson) => {\n            return responseJson;\n        })\n        .catch(error => {\n            console.error('Error getting to do list - ', error);\n            return false;\n        });\n   },\n\n   updateToDo(id){\n        let url = URLs.UPDATE_TODO;\n        url = url.replace('{toDoID}', id);\n        const headers = {'X-Api-Key':'PMAK-5ef63db179d23c004de50751-10300736bc550d2a891dc4355aab8d7a5c', 'Content-Type':'application/json'};\n        return axios.patch(url, {isComplete:true},{headers})\n        .then((response) => response.data)\n        .then((responseJson) => {\n            return responseJson;\n        })\n        .catch(error => {\n            console.error('Error updating to do task - ', error);\n            return false;\n        });\n   }\n}\n\nexport default APIClient;","import React from 'react';\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from 'react-icons/im';\nimport Moment from 'react-moment';\nimport APIClient from '../api/APIClient';\n\nfunction ToDo({ toDos, updateToDo, setLoading }) {\n\n    const handleCompleteTask = async id =>{\n        setLoading();\n        let data = await APIClient.updateToDo(id);\n        if(data.status === 'success'){\n            updateToDo(id);\n        }\n    }\n\n    return toDos.map((toDo, index) => {\n        const { dueDate, id, isComplete, description } = toDo;\n        let isPastDue = new Date(dueDate) < new Date();\n        return(\n            <div data-testid={`todo-${id}`} className={isComplete ? 'todo-row complete': isPastDue ? 'todo-row pastdue' : 'todo-row pending'} key={index}>\n                <div className={isComplete ? 'icons icons-completed' :'icons icons-pending'}>\n                    {toDo.isComplete ? <ImCheckboxChecked/> : <ImCheckboxUnchecked onClick={()=>handleCompleteTask(id)}/>}\n                </div>\n                <div className='todo-row'>\n                    {description}\n                </div>\n                {dueDate ? <div><Moment format='MM/DD/YYYY'>{dueDate}</Moment></div> : <div>Due Date N/A</div>}\n            </div>\n        );\n    });\n}\n\nexport default ToDo;\n\n","import React, { useState, useEffect } from 'react';\nimport ToDo from './ToDo';\nimport APIClient from '../api/APIClient';\nimport Loader from 'react-loader-spinner';\n\nfunction ToDoList() {\n\n    const [ toDos, setToDos ] = useState([]);\n    const [ loading, setLoading ] = useState(false);\n\n    //sort ASC due dates then sort completed tasks at bottom\n    const sortToDoList = (a,b) => {\n        return a.isComplete - b.isComplete || new Date(a.dueDate) - new Date(b.dueDate)\n    }\n\n    const setLoadingForUpdate = () => {\n        setLoading(true);\n    }\n\n    const handleUpdateToDo = (id) => {\n        let updatedToDos = [...toDos];\n        let index = toDos.findIndex(toDo => toDo.id === id);\n        updatedToDos[index].isComplete = true;\n        updatedToDos = updatedToDos.sort(sortToDoList);\n        setToDos(updatedToDos);\n        setLoading(false);\n    }\n\n    useEffect(async() => {\n        setLoading(true);\n        let toDoListData = await APIClient.getToDoList();\n        toDoListData = toDoListData.sort(sortToDoList);\n        setToDos(toDoListData);\n        setLoading(false);\n    }, []);\n\n    return (\n        <div>\n\n            {loading ?  \n            <Loader\n                type=\"ThreeDots\"\n                color=\"#00BFFF\"\n                height={100}\n                width={100}\n            />:\n            <div>\n                <h1>My To Do List</h1>\n                <ToDo toDos={toDos} updateToDo={handleUpdateToDo} setLoading={setLoadingForUpdate}/>\n            </div>}\n        </div>\n    );\n}\n\nexport default ToDoList;\n\n","import './App.css';\nimport ToDoList from './components/ToDoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n        <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}